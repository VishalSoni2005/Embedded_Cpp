1)Addition of Two Numbers using Embedded ‘C’:
INPUT: 
OUTPUT:SFR
#include <xc.h>


void main(void) {
    int i, j, k;


    TRISC = 0; //-> set port c as OUTPUT
    LATC = 0; 


    i = 0x03;
    j = 0x02;
    k = i + j;


    PORTA = i;
    PORTB = j; 
    PORTC = k;

    return;
}





2)Sum of Array
INPUT:
OUTPUT:SFR

#include <xc.h>

void main(void) {
    int sum = 0x00;
    int arr[4] = {0x01, 0x02, 0x03, 0x04};


    for (int i = 0; i < 4; i++) {
        sum = sum + arr[i];
    }


    TRISB = 0;
    PORTB = sum;


    return;
}





3)Internal to Internal Memory Transfer
INPUT: 
OUTPUT:FILE REGISTER

#include<xc.h>

void main (void){
    
    static int arr1[5]={0x01,0x02,0x03,0x04,0x05};
    static int arr2[5]={0x06,0x07,0x08,0x09,0x10};
    
    for(int i=0;i<5;i++){
        arr1[i]=arr2[i];
        
    }
  while(1);  
}

3)Internal to External Memory Transfer
INPUT :
OUTPUT:FILE REGISTER
#include <xc.h>


void main(void) {
    
    static int arr1[5] = {0x01, 0x02, 0x03, 0x04, 0x05};//0x01 to 0x05
    static int arr2[5] = {0x06, 0x07, 0x08, 0x09, 0x10}; // 0x06 to 0x10
    int temp;


    for (int i = 0; i < 5; i++) {
        temp = arr1[i];
        arr1[i] = arr2[i];
        arr2[i] = temp;
    }
while(1);
}








4)Descending Order

INPUT:
OUTPUT:PICSIMLAB


#include <xc.h>

void main(void) {
    int i, j, t;
    static int a[] = {0x01, 0x03, 0x06, 0x04, 0x07, 0x02, 0x05, 0x08};


    for (i = 0; i < 7; i++) {
        for (j = 0; j < 7 - i; j++) {
            if (a[j] < a[j+1]) {
                t = a[j];
                a[j] = a[j+1];
                a[j+1] = t;
            }
        }
    }


    TRISD = 0;


    for (i = 0; i < 8; i++) {
        PORTD = a[i];
        for (int n = 0; n < 1000; n++) {
            for (int k = 0; k < 100; k++) {
            }
        }
    }
return;
}




4)Ascending Order
INPUT
OUTPUT:PICSIMLAB
#include <xc.h>



void main(void) {
    int i, j, t;
    static int a[] = {0x01, 0x03, 0x06, 0x04, 0x07, 0x02, 0x05, 0x08};


    for (i = 0; i < 7; i++) {
        for (j = 0; j < 7 - i; j++) {
            if (a[j] > a[j+1]) {
                t = a[j];
                a[j] = a[j+1];
                a[j+1] = t;
            }
        }
    }


    TRISD = 0;


    for (i = 0; i < 8; i++) {
        PORTD = a[i];
        for (int n = 0; n < 1000; n++) {
            for (int k = 0; k < 100; k++) {
            }
        }
    }
return;
}




5)LED BLINKING 
OUTPUT:PICSIM /KIT
#include <xc.h>
void delay(unsigned int time)
{
   
    for(int i=0;i<time;i++)
    {
        for(int j=0;j<5000;j++)
        {  
        }
    }
}
void main(void) {
    TRISD=0x00;
    LATD=0xff;
    while(1)
    {
        LATD=~LATD;
        delay(200);
    }
    return;
}








6)BUZZER 
OUTPUT:PICSIM /KIT


#include <xc.h>
#define Buzzer LATAbits.LATA5


unsigned int count = 0;


void interrupt Timer() {
    if (TMR1IF == 1) {
        TMR1L = 0x20;
        TMR1H = 0xD1;
        count++;
        if (count >= 1000) {
            Buzzer = ~Buzzer;
            count = 0;
        }
        TMR1IF = 0;
    }
}


void main(void) {
    TRISB = 0;
    TRISAbits.TRISA5 = 0;


    GIE = 1;
    PEIE = 1;
    TMR1IE = 1;
    TMR1IF = 0;
    T1CON = 0x20;
    TMR1L = 0x20;
    TMR1H = 0xD1;
    TMR1ON = 1;


    while (1);
    return;
}




8)DC MOTOR
OUTPUT:KIT

#include <xc.h>


void timer2Init(void) {
    T2CON = 0x02;
    PR2 = 0x90;
}


void delay(unsigned int time){
    for (i = 0; i < time; i++) {
        for (j = 0; j < 1000; j++) {
       }
    }
}

void main(void) {
     

    TRISCbits.TRISC2 = 0;     // Set RC2 as output (PWM output)
    CCP1CON = 0x0c; //12    // Configure CCP1 for PWM mode
    CCPR1L = 15;              // Initial low duty cycle

    timer2Init();             // Initialize Timer2
    TMR2ON = 1;               // Turn on Timer2

    while (1) {
        for (unsigned int i = 15; i < 150; i++) {
            CCPR1L = i;
            delay(100);
        }
        for (unsigned int i = 150; i > 15; i--) {
            CCPR1L = i;
            delay(100);
        }
    }
}





10) LED BLINKING SIGNAL


OUTPUT:TINKERCAD WEBSITE
INPUT:
// C++ code
//
void setup()
{
  pinMode(13, OUTPUT);
}

void loop()
{
  digitalWrite(13, HIGH);
  delay(1000); // Wait for 1000 millisecond(s)
  digitalWrite(13, LOW);
  delay(1000); // Wait for 1000 millisecond(s)
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9)LCD TEMP
OUTPUT:KIT


#include <pic18f4550.h>
#include <xc.h>
#include <stdio.h>


#define LCD_EN   LATAbits.LA1
#define LCD_RS   LATAbits.LA0
#define LCDPORT  LATB


unsigned char str[16];


void lcd_delay(unsigned int time) {
    unsigned int i, j;
    for (i = 0; i < time; i++) {
        for (j = 0; j < 100; j++) {}
    }
}


void SendInstruction(unsigned char command) {
    LCD_RS = 0;
    LCDPORT = command;
    LCD_EN = 1;
    lcd_delay(10);
    LCD_EN = 0;
    lcd_delay(10);
}


void SendData(unsigned char lcddata) {
    LCD_RS = 1;
    LCDPORT = lcddata;
    LCD_EN = 1;
    lcd_delay(10);
    LCD_EN = 0;
    lcd_delay(10);
}


void InitLCD(void) {
    ADCON1 = 0x0F;
    TRISB = 0x00;
    TRISAbits.RA0 = 0;
    TRISAbits.RA1 = 0;


    SendInstruction(0x38);
    SendInstruction(0x06);
    SendInstruction(0x0C);
    SendInstruction(0x01);
    SendInstruction(0x80);
}


void LCD_display(unsigned int row, unsigned int pos, unsigned char *ch) {
    if (row == 1) {
        SendInstruction(0x80 | (pos - 1));
    } else {
        SendInstruction(0xC0 | (pos - 1));
    }


    while (*ch) {
        SendData(*ch++);
    }
}


void ADCInit(void) {
    TRISEbits.RE2 = 1;
    ADCON0 = 0b0000111;
    ADCON2 = 0b10101110;
}


unsigned short Read_Temp(void) {
    ADCON0 = 0b00011101;
    GODONE = 1;
    while (GO_DONE == 1);
    return ADRES;
}


void main(void) {
    unsigned int temp;


    InitLCD();
    ADCInit();
    LCD_display(1, 1, "Temp Hinjawadi");


    while (1) {
        temp = Read_Temp();
        temp = ((temp * 500) / 1023);
        sprintf(str, "%d", temp);
        LCD_display(2, 1, str);
        lcd_delay(9000);
    }
}



7)LCD DISPLAY
OUTPUT:KIT


#include <xc.h>
#include <p18f4550.h>


#define LCD_EN  LATAbits.LA1
#define LCD_RS  LATAbits.LA0
#define LCDPORT LATB


void lcd_delay(unsigned int time) {
    unsigned int j, i;
    for (i = 0; i < time; i++) {
        for (j = 0; j < 100; j++) {}
    }
}


void SendInstruction(unsigned char command) {
    LCD_RS = 0;
    LCDPORT = command;
    LCD_EN = 1;
    lcd_delay(10);
    LCD_EN = 0;
    lcd_delay(10);
}


void SendData(unsigned char LcdData) {
    LCD_RS = 1;
    LCDPORT = LcdData;
    LCD_EN = 1;
    lcd_delay(10);
    LCD_EN = 0;
    lcd_delay(10);
}


void initLCD(void) {
    ADCON1 = 0x0F;
    TRISB = 0x00;
    TRISAbits.RA0 = 0;
    TRISAbits.RA1 = 0;
    SendInstruction(0x38);
    SendInstruction(0x06);
    SendInstruction(0x0C);
    SendInstruction(0x01);
    SendInstruction(0x80);
}


unsigned char* string1 = "MicroEmbeded";
unsigned char* string2 = "PIC Kit";


void main(void) {
    ADCON1 = 0x0F;
    TRISB = 0x00;
    TRISAbits.RA0 = 0;
    TRISAbits.RA1 = 0;


    SendInstruction(0x38);
    SendInstruction(0x06);
    SendInstruction(0x0C);
    SendInstruction(0x01);
    SendInstruction(0x80);


    while (*string1) {
        SendData(*string1);
        string1++;
    }


    SendInstruction(0xC0);


    while (*string2) {
        SendData(*string2);
        string2++;
    }


    while (1);
    return;
}




